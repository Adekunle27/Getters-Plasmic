// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: moQ1NBF41CE4DHD4w3iQdW
// Component: g9wbakSKyLDL
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_asalytics_test.module.css"; // plasmic-import: moQ1NBF41CE4DHD4w3iQdW/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: g9wbakSKyLDL/css

import Logo3Icon from "./icons/PlasmicIcon__Logo3"; // plasmic-import: MXkX2Am0Rq/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  codingTest?: p.Flex<"div">;
  header?: p.Flex<"div">;
  headerLogo?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  frame3?: p.Flex<"div">;
  analyzeButton?: p.Flex<"div">;
  analyzeButton2?: p.Flex<"a">;
  frame199?: p.Flex<"div">;
  teaamSection?: p.Flex<"div">;
  frame159?: p.Flex<"div">;
  frame162?: p.Flex<"div">;
  maskGroup?: p.Flex<"div">;
  bitcoinIc1?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  frame200?: p.Flex<"div">;
  frame168?: p.Flex<"div">;
  maskGroup2?: p.Flex<"div">;
  bitcoinIc2?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  frame201?: p.Flex<"div">;
  frame169?: p.Flex<"div">;
  maskGroup3?: p.Flex<"div">;
  bitcoinIc3?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame202?: p.Flex<"div">;
  frame170?: p.Flex<"div">;
  maskGroup4?: p.Flex<"div">;
  bitcoinIc4?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  frame203?: p.Flex<"div">;
  frame161?: p.Flex<"div">;
  frame163?: p.Flex<"div">;
  maskGroup5?: p.Flex<"div">;
  bitcoinIc5?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  frame204?: p.Flex<"div">;
  frame171?: p.Flex<"div">;
  maskGroup6?: p.Flex<"div">;
  bitcoinIc6?: p.Flex<"div">;
  frame9?: p.Flex<"div">;
  frame205?: p.Flex<"div">;
  frame172?: p.Flex<"div">;
  maskGroup7?: p.Flex<"div">;
  bitcoinIc7?: p.Flex<"div">;
  frame10?: p.Flex<"div">;
  frame206?: p.Flex<"div">;
  frame173?: p.Flex<"div">;
  maskGroup8?: p.Flex<"div">;
  bitcoinIc8?: p.Flex<"div">;
  frame11?: p.Flex<"div">;
  frame207?: p.Flex<"div">;
  frame164?: p.Flex<"div">;
  frame174?: p.Flex<"div">;
  maskGroup9?: p.Flex<"div">;
  bitcoinIc9?: p.Flex<"div">;
  frame12?: p.Flex<"div">;
  frame208?: p.Flex<"div">;
  frame175?: p.Flex<"div">;
  maskGroup10?: p.Flex<"div">;
  bitcoinIc10?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
  frame209?: p.Flex<"div">;
  frame176?: p.Flex<"div">;
  maskGroup11?: p.Flex<"div">;
  bitcoinIc11?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  frame210?: p.Flex<"div">;
  frame177?: p.Flex<"div">;
  maskGroup12?: p.Flex<"div">;
  bitcoinIc12?: p.Flex<"div">;
  frame15?: p.Flex<"div">;
  frame211?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"codingTest"}
            data-plasmic-override={overrides.codingTest}
            hasGap={true}
            className={classNames(projectcss.all, sty.codingTest)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"headerLogo"}
                data-plasmic-override={overrides.headerLogo}
                hasGap={true}
                className={classNames(projectcss.all, sty.headerLogo)}
              >
                <Logo3Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cKngX
                  )}
                >
                  {"SAlytics"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame3)}
              >
                {false ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"analyzeButton"}
                    data-plasmic-override={overrides.analyzeButton}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.analyzeButton)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uNxs2
                      )}
                    >
                      {"LOGIN"}
                    </div>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"a"}
                  data-plasmic-name={"analyzeButton2"}
                  data-plasmic-override={overrides.analyzeButton2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.analyzeButton2
                  )}
                  href={"/" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rCrV5
                    )}
                  >
                    {"ANALYZE ASAs"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <div
              data-plasmic-name={"frame199"}
              data-plasmic-override={overrides.frame199}
              className={classNames(projectcss.all, sty.frame199)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__klVv
                )}
              >
                {"List of Algorand Standard Assets \non ASAlytics"}
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"teaamSection"}
              data-plasmic-override={overrides.teaamSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.teaamSection)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame159"}
                data-plasmic-override={overrides.frame159}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame159)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame162"}
                  data-plasmic-override={overrides.frame162}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame162)}
                >
                  <div
                    data-plasmic-name={"maskGroup"}
                    data-plasmic-override={overrides.maskGroup}
                    className={classNames(projectcss.all, sty.maskGroup)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc1"}
                      data-plasmic-override={overrides.bitcoinIc1}
                      className={classNames(projectcss.all, sty.bitcoinIc1)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ix2Xq
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame200"}
                      data-plasmic-override={overrides.frame200}
                      className={classNames(projectcss.all, sty.frame200)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zaY8H
                        )}
                      >
                        {"Available"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame168"}
                  data-plasmic-override={overrides.frame168}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame168)}
                >
                  <div
                    data-plasmic-name={"maskGroup2"}
                    data-plasmic-override={overrides.maskGroup2}
                    className={classNames(projectcss.all, sty.maskGroup2)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc2"}
                      data-plasmic-override={overrides.bitcoinIc2}
                      className={classNames(projectcss.all, sty.bitcoinIc2)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qlo6D
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame201"}
                      data-plasmic-override={overrides.frame201}
                      className={classNames(projectcss.all, sty.frame201)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pcPe4
                        )}
                      >
                        {"Available"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame169"}
                  data-plasmic-override={overrides.frame169}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame169)}
                >
                  <div
                    data-plasmic-name={"maskGroup3"}
                    data-plasmic-override={overrides.maskGroup3}
                    className={classNames(projectcss.all, sty.maskGroup3)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc3"}
                      data-plasmic-override={overrides.bitcoinIc3}
                      className={classNames(projectcss.all, sty.bitcoinIc3)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cwEiV
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame202"}
                      data-plasmic-override={overrides.frame202}
                      className={classNames(projectcss.all, sty.frame202)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wdPdo
                        )}
                      >
                        {"Available"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame170"}
                  data-plasmic-override={overrides.frame170}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame170)}
                >
                  <div
                    data-plasmic-name={"maskGroup4"}
                    data-plasmic-override={overrides.maskGroup4}
                    className={classNames(projectcss.all, sty.maskGroup4)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc4"}
                      data-plasmic-override={overrides.bitcoinIc4}
                      className={classNames(projectcss.all, sty.bitcoinIc4)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame7"}
                    data-plasmic-override={overrides.frame7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jMyGi
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame203"}
                      data-plasmic-override={overrides.frame203}
                      className={classNames(projectcss.all, sty.frame203)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gjjaC
                        )}
                      >
                        {"Available"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame161"}
                data-plasmic-override={overrides.frame161}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame161)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame163"}
                  data-plasmic-override={overrides.frame163}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame163)}
                >
                  <div
                    data-plasmic-name={"maskGroup5"}
                    data-plasmic-override={overrides.maskGroup5}
                    className={classNames(projectcss.all, sty.maskGroup5)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc5"}
                      data-plasmic-override={overrides.bitcoinIc5}
                      className={classNames(projectcss.all, sty.bitcoinIc5)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame8"}
                    data-plasmic-override={overrides.frame8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vYlOh
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame204"}
                      data-plasmic-override={overrides.frame204}
                      className={classNames(projectcss.all, sty.frame204)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q2Slh
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame171"}
                  data-plasmic-override={overrides.frame171}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame171)}
                >
                  <div
                    data-plasmic-name={"maskGroup6"}
                    data-plasmic-override={overrides.maskGroup6}
                    className={classNames(projectcss.all, sty.maskGroup6)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc6"}
                      data-plasmic-override={overrides.bitcoinIc6}
                      className={classNames(projectcss.all, sty.bitcoinIc6)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame9"}
                    data-plasmic-override={overrides.frame9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5T5Wg
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame205"}
                      data-plasmic-override={overrides.frame205}
                      className={classNames(projectcss.all, sty.frame205)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f76A
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame172"}
                  data-plasmic-override={overrides.frame172}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame172)}
                >
                  <div
                    data-plasmic-name={"maskGroup7"}
                    data-plasmic-override={overrides.maskGroup7}
                    className={classNames(projectcss.all, sty.maskGroup7)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc7"}
                      data-plasmic-override={overrides.bitcoinIc7}
                      className={classNames(projectcss.all, sty.bitcoinIc7)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame10"}
                    data-plasmic-override={overrides.frame10}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame10)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mcFmZ
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame206"}
                      data-plasmic-override={overrides.frame206}
                      className={classNames(projectcss.all, sty.frame206)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___90Ze7
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame173"}
                  data-plasmic-override={overrides.frame173}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame173)}
                >
                  <div
                    data-plasmic-name={"maskGroup8"}
                    data-plasmic-override={overrides.maskGroup8}
                    className={classNames(projectcss.all, sty.maskGroup8)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc8"}
                      data-plasmic-override={overrides.bitcoinIc8}
                      className={classNames(projectcss.all, sty.bitcoinIc8)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame11"}
                    data-plasmic-override={overrides.frame11}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame11)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rO8I
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame207"}
                      data-plasmic-override={overrides.frame207}
                      className={classNames(projectcss.all, sty.frame207)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__laJx
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame164"}
                data-plasmic-override={overrides.frame164}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame164)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame174"}
                  data-plasmic-override={overrides.frame174}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame174)}
                >
                  <div
                    data-plasmic-name={"maskGroup9"}
                    data-plasmic-override={overrides.maskGroup9}
                    className={classNames(projectcss.all, sty.maskGroup9)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc9"}
                      data-plasmic-override={overrides.bitcoinIc9}
                      className={classNames(projectcss.all, sty.bitcoinIc9)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame12"}
                    data-plasmic-override={overrides.frame12}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame12)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bGYod
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame208"}
                      data-plasmic-override={overrides.frame208}
                      className={classNames(projectcss.all, sty.frame208)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mctwu
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame175"}
                  data-plasmic-override={overrides.frame175}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame175)}
                >
                  <div
                    data-plasmic-name={"maskGroup10"}
                    data-plasmic-override={overrides.maskGroup10}
                    className={classNames(projectcss.all, sty.maskGroup10)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc10"}
                      data-plasmic-override={overrides.bitcoinIc10}
                      className={classNames(projectcss.all, sty.bitcoinIc10)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame13"}
                    data-plasmic-override={overrides.frame13}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame13)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6U8ME
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame209"}
                      data-plasmic-override={overrides.frame209}
                      className={classNames(projectcss.all, sty.frame209)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zKRxY
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame176"}
                  data-plasmic-override={overrides.frame176}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame176)}
                >
                  <div
                    data-plasmic-name={"maskGroup11"}
                    data-plasmic-override={overrides.maskGroup11}
                    className={classNames(projectcss.all, sty.maskGroup11)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc11"}
                      data-plasmic-override={overrides.bitcoinIc11}
                      className={classNames(projectcss.all, sty.bitcoinIc11)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame14"}
                    data-plasmic-override={overrides.frame14}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame14)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pwZeC
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame210"}
                      data-plasmic-override={overrides.frame210}
                      className={classNames(projectcss.all, sty.frame210)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0FdB2
                        )}
                      >
                        {"Unavailable"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame177"}
                  data-plasmic-override={overrides.frame177}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame177)}
                >
                  <div
                    data-plasmic-name={"maskGroup12"}
                    data-plasmic-override={overrides.maskGroup12}
                    className={classNames(projectcss.all, sty.maskGroup12)}
                  >
                    <div
                      data-plasmic-name={"bitcoinIc12"}
                      data-plasmic-override={overrides.bitcoinIc12}
                      className={classNames(projectcss.all, sty.bitcoinIc12)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame15"}
                    data-plasmic-override={overrides.frame15}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame15)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ap98A
                      )}
                    >
                      {"Alogrand"}
                    </div>

                    <div
                      data-plasmic-name={"frame211"}
                      data-plasmic-override={overrides.frame211}
                      className={classNames(projectcss.all, sty.frame211)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1HHvh
                        )}
                      >
                        {"Available"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "codingTest",
    "header",
    "headerLogo",
    "svg",
    "frame3",
    "analyzeButton",
    "analyzeButton2",
    "frame199",
    "teaamSection",
    "frame159",
    "frame162",
    "maskGroup",
    "bitcoinIc1",
    "frame4",
    "frame200",
    "frame168",
    "maskGroup2",
    "bitcoinIc2",
    "frame5",
    "frame201",
    "frame169",
    "maskGroup3",
    "bitcoinIc3",
    "frame6",
    "frame202",
    "frame170",
    "maskGroup4",
    "bitcoinIc4",
    "frame7",
    "frame203",
    "frame161",
    "frame163",
    "maskGroup5",
    "bitcoinIc5",
    "frame8",
    "frame204",
    "frame171",
    "maskGroup6",
    "bitcoinIc6",
    "frame9",
    "frame205",
    "frame172",
    "maskGroup7",
    "bitcoinIc7",
    "frame10",
    "frame206",
    "frame173",
    "maskGroup8",
    "bitcoinIc8",
    "frame11",
    "frame207",
    "frame164",
    "frame174",
    "maskGroup9",
    "bitcoinIc9",
    "frame12",
    "frame208",
    "frame175",
    "maskGroup10",
    "bitcoinIc10",
    "frame13",
    "frame209",
    "frame176",
    "maskGroup11",
    "bitcoinIc11",
    "frame14",
    "frame210",
    "frame177",
    "maskGroup12",
    "bitcoinIc12",
    "frame15",
    "frame211"
  ],
  codingTest: [
    "codingTest",
    "header",
    "headerLogo",
    "svg",
    "frame3",
    "analyzeButton",
    "analyzeButton2",
    "frame199",
    "teaamSection",
    "frame159",
    "frame162",
    "maskGroup",
    "bitcoinIc1",
    "frame4",
    "frame200",
    "frame168",
    "maskGroup2",
    "bitcoinIc2",
    "frame5",
    "frame201",
    "frame169",
    "maskGroup3",
    "bitcoinIc3",
    "frame6",
    "frame202",
    "frame170",
    "maskGroup4",
    "bitcoinIc4",
    "frame7",
    "frame203",
    "frame161",
    "frame163",
    "maskGroup5",
    "bitcoinIc5",
    "frame8",
    "frame204",
    "frame171",
    "maskGroup6",
    "bitcoinIc6",
    "frame9",
    "frame205",
    "frame172",
    "maskGroup7",
    "bitcoinIc7",
    "frame10",
    "frame206",
    "frame173",
    "maskGroup8",
    "bitcoinIc8",
    "frame11",
    "frame207",
    "frame164",
    "frame174",
    "maskGroup9",
    "bitcoinIc9",
    "frame12",
    "frame208",
    "frame175",
    "maskGroup10",
    "bitcoinIc10",
    "frame13",
    "frame209",
    "frame176",
    "maskGroup11",
    "bitcoinIc11",
    "frame14",
    "frame210",
    "frame177",
    "maskGroup12",
    "bitcoinIc12",
    "frame15",
    "frame211"
  ],
  header: [
    "header",
    "headerLogo",
    "svg",
    "frame3",
    "analyzeButton",
    "analyzeButton2"
  ],
  headerLogo: ["headerLogo", "svg"],
  svg: ["svg"],
  frame3: ["frame3", "analyzeButton", "analyzeButton2"],
  analyzeButton: ["analyzeButton"],
  analyzeButton2: ["analyzeButton2"],
  frame199: ["frame199"],
  teaamSection: [
    "teaamSection",
    "frame159",
    "frame162",
    "maskGroup",
    "bitcoinIc1",
    "frame4",
    "frame200",
    "frame168",
    "maskGroup2",
    "bitcoinIc2",
    "frame5",
    "frame201",
    "frame169",
    "maskGroup3",
    "bitcoinIc3",
    "frame6",
    "frame202",
    "frame170",
    "maskGroup4",
    "bitcoinIc4",
    "frame7",
    "frame203",
    "frame161",
    "frame163",
    "maskGroup5",
    "bitcoinIc5",
    "frame8",
    "frame204",
    "frame171",
    "maskGroup6",
    "bitcoinIc6",
    "frame9",
    "frame205",
    "frame172",
    "maskGroup7",
    "bitcoinIc7",
    "frame10",
    "frame206",
    "frame173",
    "maskGroup8",
    "bitcoinIc8",
    "frame11",
    "frame207",
    "frame164",
    "frame174",
    "maskGroup9",
    "bitcoinIc9",
    "frame12",
    "frame208",
    "frame175",
    "maskGroup10",
    "bitcoinIc10",
    "frame13",
    "frame209",
    "frame176",
    "maskGroup11",
    "bitcoinIc11",
    "frame14",
    "frame210",
    "frame177",
    "maskGroup12",
    "bitcoinIc12",
    "frame15",
    "frame211"
  ],
  frame159: [
    "frame159",
    "frame162",
    "maskGroup",
    "bitcoinIc1",
    "frame4",
    "frame200",
    "frame168",
    "maskGroup2",
    "bitcoinIc2",
    "frame5",
    "frame201",
    "frame169",
    "maskGroup3",
    "bitcoinIc3",
    "frame6",
    "frame202",
    "frame170",
    "maskGroup4",
    "bitcoinIc4",
    "frame7",
    "frame203"
  ],
  frame162: ["frame162", "maskGroup", "bitcoinIc1", "frame4", "frame200"],
  maskGroup: ["maskGroup", "bitcoinIc1"],
  bitcoinIc1: ["bitcoinIc1"],
  frame4: ["frame4", "frame200"],
  frame200: ["frame200"],
  frame168: ["frame168", "maskGroup2", "bitcoinIc2", "frame5", "frame201"],
  maskGroup2: ["maskGroup2", "bitcoinIc2"],
  bitcoinIc2: ["bitcoinIc2"],
  frame5: ["frame5", "frame201"],
  frame201: ["frame201"],
  frame169: ["frame169", "maskGroup3", "bitcoinIc3", "frame6", "frame202"],
  maskGroup3: ["maskGroup3", "bitcoinIc3"],
  bitcoinIc3: ["bitcoinIc3"],
  frame6: ["frame6", "frame202"],
  frame202: ["frame202"],
  frame170: ["frame170", "maskGroup4", "bitcoinIc4", "frame7", "frame203"],
  maskGroup4: ["maskGroup4", "bitcoinIc4"],
  bitcoinIc4: ["bitcoinIc4"],
  frame7: ["frame7", "frame203"],
  frame203: ["frame203"],
  frame161: [
    "frame161",
    "frame163",
    "maskGroup5",
    "bitcoinIc5",
    "frame8",
    "frame204",
    "frame171",
    "maskGroup6",
    "bitcoinIc6",
    "frame9",
    "frame205",
    "frame172",
    "maskGroup7",
    "bitcoinIc7",
    "frame10",
    "frame206",
    "frame173",
    "maskGroup8",
    "bitcoinIc8",
    "frame11",
    "frame207"
  ],
  frame163: ["frame163", "maskGroup5", "bitcoinIc5", "frame8", "frame204"],
  maskGroup5: ["maskGroup5", "bitcoinIc5"],
  bitcoinIc5: ["bitcoinIc5"],
  frame8: ["frame8", "frame204"],
  frame204: ["frame204"],
  frame171: ["frame171", "maskGroup6", "bitcoinIc6", "frame9", "frame205"],
  maskGroup6: ["maskGroup6", "bitcoinIc6"],
  bitcoinIc6: ["bitcoinIc6"],
  frame9: ["frame9", "frame205"],
  frame205: ["frame205"],
  frame172: ["frame172", "maskGroup7", "bitcoinIc7", "frame10", "frame206"],
  maskGroup7: ["maskGroup7", "bitcoinIc7"],
  bitcoinIc7: ["bitcoinIc7"],
  frame10: ["frame10", "frame206"],
  frame206: ["frame206"],
  frame173: ["frame173", "maskGroup8", "bitcoinIc8", "frame11", "frame207"],
  maskGroup8: ["maskGroup8", "bitcoinIc8"],
  bitcoinIc8: ["bitcoinIc8"],
  frame11: ["frame11", "frame207"],
  frame207: ["frame207"],
  frame164: [
    "frame164",
    "frame174",
    "maskGroup9",
    "bitcoinIc9",
    "frame12",
    "frame208",
    "frame175",
    "maskGroup10",
    "bitcoinIc10",
    "frame13",
    "frame209",
    "frame176",
    "maskGroup11",
    "bitcoinIc11",
    "frame14",
    "frame210",
    "frame177",
    "maskGroup12",
    "bitcoinIc12",
    "frame15",
    "frame211"
  ],
  frame174: ["frame174", "maskGroup9", "bitcoinIc9", "frame12", "frame208"],
  maskGroup9: ["maskGroup9", "bitcoinIc9"],
  bitcoinIc9: ["bitcoinIc9"],
  frame12: ["frame12", "frame208"],
  frame208: ["frame208"],
  frame175: ["frame175", "maskGroup10", "bitcoinIc10", "frame13", "frame209"],
  maskGroup10: ["maskGroup10", "bitcoinIc10"],
  bitcoinIc10: ["bitcoinIc10"],
  frame13: ["frame13", "frame209"],
  frame209: ["frame209"],
  frame176: ["frame176", "maskGroup11", "bitcoinIc11", "frame14", "frame210"],
  maskGroup11: ["maskGroup11", "bitcoinIc11"],
  bitcoinIc11: ["bitcoinIc11"],
  frame14: ["frame14", "frame210"],
  frame210: ["frame210"],
  frame177: ["frame177", "maskGroup12", "bitcoinIc12", "frame15", "frame211"],
  maskGroup12: ["maskGroup12", "bitcoinIc12"],
  bitcoinIc12: ["bitcoinIc12"],
  frame15: ["frame15", "frame211"],
  frame211: ["frame211"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  codingTest: "div";
  header: "div";
  headerLogo: "div";
  svg: "svg";
  frame3: "div";
  analyzeButton: "div";
  analyzeButton2: "a";
  frame199: "div";
  teaamSection: "div";
  frame159: "div";
  frame162: "div";
  maskGroup: "div";
  bitcoinIc1: "div";
  frame4: "div";
  frame200: "div";
  frame168: "div";
  maskGroup2: "div";
  bitcoinIc2: "div";
  frame5: "div";
  frame201: "div";
  frame169: "div";
  maskGroup3: "div";
  bitcoinIc3: "div";
  frame6: "div";
  frame202: "div";
  frame170: "div";
  maskGroup4: "div";
  bitcoinIc4: "div";
  frame7: "div";
  frame203: "div";
  frame161: "div";
  frame163: "div";
  maskGroup5: "div";
  bitcoinIc5: "div";
  frame8: "div";
  frame204: "div";
  frame171: "div";
  maskGroup6: "div";
  bitcoinIc6: "div";
  frame9: "div";
  frame205: "div";
  frame172: "div";
  maskGroup7: "div";
  bitcoinIc7: "div";
  frame10: "div";
  frame206: "div";
  frame173: "div";
  maskGroup8: "div";
  bitcoinIc8: "div";
  frame11: "div";
  frame207: "div";
  frame164: "div";
  frame174: "div";
  maskGroup9: "div";
  bitcoinIc9: "div";
  frame12: "div";
  frame208: "div";
  frame175: "div";
  maskGroup10: "div";
  bitcoinIc10: "div";
  frame13: "div";
  frame209: "div";
  frame176: "div";
  maskGroup11: "div";
  bitcoinIc11: "div";
  frame14: "div";
  frame210: "div";
  frame177: "div";
  maskGroup12: "div";
  bitcoinIc12: "div";
  frame15: "div";
  frame211: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    codingTest: makeNodeComponent("codingTest"),
    header: makeNodeComponent("header"),
    headerLogo: makeNodeComponent("headerLogo"),
    svg: makeNodeComponent("svg"),
    frame3: makeNodeComponent("frame3"),
    analyzeButton: makeNodeComponent("analyzeButton"),
    analyzeButton2: makeNodeComponent("analyzeButton2"),
    frame199: makeNodeComponent("frame199"),
    teaamSection: makeNodeComponent("teaamSection"),
    frame159: makeNodeComponent("frame159"),
    frame162: makeNodeComponent("frame162"),
    maskGroup: makeNodeComponent("maskGroup"),
    bitcoinIc1: makeNodeComponent("bitcoinIc1"),
    frame4: makeNodeComponent("frame4"),
    frame200: makeNodeComponent("frame200"),
    frame168: makeNodeComponent("frame168"),
    maskGroup2: makeNodeComponent("maskGroup2"),
    bitcoinIc2: makeNodeComponent("bitcoinIc2"),
    frame5: makeNodeComponent("frame5"),
    frame201: makeNodeComponent("frame201"),
    frame169: makeNodeComponent("frame169"),
    maskGroup3: makeNodeComponent("maskGroup3"),
    bitcoinIc3: makeNodeComponent("bitcoinIc3"),
    frame6: makeNodeComponent("frame6"),
    frame202: makeNodeComponent("frame202"),
    frame170: makeNodeComponent("frame170"),
    maskGroup4: makeNodeComponent("maskGroup4"),
    bitcoinIc4: makeNodeComponent("bitcoinIc4"),
    frame7: makeNodeComponent("frame7"),
    frame203: makeNodeComponent("frame203"),
    frame161: makeNodeComponent("frame161"),
    frame163: makeNodeComponent("frame163"),
    maskGroup5: makeNodeComponent("maskGroup5"),
    bitcoinIc5: makeNodeComponent("bitcoinIc5"),
    frame8: makeNodeComponent("frame8"),
    frame204: makeNodeComponent("frame204"),
    frame171: makeNodeComponent("frame171"),
    maskGroup6: makeNodeComponent("maskGroup6"),
    bitcoinIc6: makeNodeComponent("bitcoinIc6"),
    frame9: makeNodeComponent("frame9"),
    frame205: makeNodeComponent("frame205"),
    frame172: makeNodeComponent("frame172"),
    maskGroup7: makeNodeComponent("maskGroup7"),
    bitcoinIc7: makeNodeComponent("bitcoinIc7"),
    frame10: makeNodeComponent("frame10"),
    frame206: makeNodeComponent("frame206"),
    frame173: makeNodeComponent("frame173"),
    maskGroup8: makeNodeComponent("maskGroup8"),
    bitcoinIc8: makeNodeComponent("bitcoinIc8"),
    frame11: makeNodeComponent("frame11"),
    frame207: makeNodeComponent("frame207"),
    frame164: makeNodeComponent("frame164"),
    frame174: makeNodeComponent("frame174"),
    maskGroup9: makeNodeComponent("maskGroup9"),
    bitcoinIc9: makeNodeComponent("bitcoinIc9"),
    frame12: makeNodeComponent("frame12"),
    frame208: makeNodeComponent("frame208"),
    frame175: makeNodeComponent("frame175"),
    maskGroup10: makeNodeComponent("maskGroup10"),
    bitcoinIc10: makeNodeComponent("bitcoinIc10"),
    frame13: makeNodeComponent("frame13"),
    frame209: makeNodeComponent("frame209"),
    frame176: makeNodeComponent("frame176"),
    maskGroup11: makeNodeComponent("maskGroup11"),
    bitcoinIc11: makeNodeComponent("bitcoinIc11"),
    frame14: makeNodeComponent("frame14"),
    frame210: makeNodeComponent("frame210"),
    frame177: makeNodeComponent("frame177"),
    maskGroup12: makeNodeComponent("maskGroup12"),
    bitcoinIc12: makeNodeComponent("bitcoinIc12"),
    frame15: makeNodeComponent("frame15"),
    frame211: makeNodeComponent("frame211"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
